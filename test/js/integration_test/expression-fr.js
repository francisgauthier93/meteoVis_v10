QUnit.test( "Expressions FR", function( assert ) {
    assert.equal( N('gars').g('f').n('p'), "filles", '"gars" au féminin pluriel irrégulier' );
    assert.equal( NP(D('un'),N('chien'),A('beau'),A('sale')).n('p'), "des beaux chiens sales", 'syntagme nominal au pluriel, "beau" avant le nom' );
    assert.equal( NP(D('un'),N('voiture'),A('beau'),PP(P('de'), N('course'))).n('p'), "des belles voitures de course", 'complément du nom' );
    assert.equal( NP(D('le'), N('rage'), PP(P('de'), V('vivre'))), "la rage de vivre", 'verbe dans syntagme prépositionnel' );
    assert.equal( VP(V('avoir'), NP(D('son'), N('voyage'))), "avoir son voyage", 'syntagme verbal isolé avec complément' );
    assert.equal( S(NP(D('le'), N('chat')), VP(V('manger'), NP(D('le'), N('souris')))), "Le chat mange la souris.", 'phrase complète, avec sujet, verbe et complément' );
    assert.equal( S(NP(D('le'), N('chat').n('p')), VP(V('manger'), NP(D('un'), N('souris')))), "Les chats mangent une souris.", 'accord du verbe avec le sujet' );
    assert.equal( NP(D('le'), N('souris'), SP(C('que'), S(NP(D('le'), N('chat')), VP(V('manger'))))), "la souris que le chat mange", 'proposition subordonnée' );
    assert.equal( NP(D('le'), N('chose'), SP(Pro('dont'), S(Pro('tu'), V('parler')))), "la chose dont tu parles", 'proposition subordonnée par pronom "dont"' );
    assert.equal( S(Pro('je'), VP(V('faire'), N('attention'), PP(P('à'), NP(D('mon'), N('ami').n('p'))))), "Je fais attention à mes amis.", 'phrase avec pronom sujet et complément indirect' );
    assert.equal( VP(V('passer').f('ip').pe(2), PP(P('par'), NP(D('ce'), N('autoroute')).g('f'))), "passe par cette autoroute", 'impératif présent, 2e personne' );
    assert.equal( S(Pro('je'), VP(V('donner'), NP(D('un'), N('cadeau')), PP(P('à'), Pro('toi')))), "Je te donne un cadeau.", 'pronom personnel comme complément indirect' );
    assert.equal( S(Pro('je'), VP(V('détester'), Pro('elle'))).t('exc'), "Je la déteste!", 'pronom personnel comme complément direct, phrase exclamative' );
    assert.equal( S(Pro('je'), VP(V('trouver'), A('bizarre'), Pro('elle'))), "Je la trouve bizarre.", 'pronom personnel comme complément direct, adjectif comme attribut' );
    assert.equal( S(Pro('je'),VP(V('donner').f('f'),Pro('elle'),PP(P('à'), Pro('elle')))), "Je la lui donnerai.", 'pronoms personnels comme compléments direct et indirect' );
    assert.equal( NP(D('le'),N('tache'), A('noir'), A('laid'), A('gros')), "la grosse tache noire laide", 'adjectifs automatiquement placés avant ou après le nom' );
    assert.equal( NP(D('un'), N('sacramouille'), PP(P('de'), NP(A('beau'), N('projet'),PP(P('de'), N('fou'))))), "un sacramouille de beau projet de fou", 'compléments du nom emboîtés' );
    assert.equal( S(CP(C('ou'),Pro('moi'),Pro('toi'),Pro('elle')),V('manger')), "Moi, toi ou elle mange.", 'pronoms coordonnés par "ou" sujets du verbe' );
    assert.equal( S(CP(C('et'),Pro('moi'),Pro('toi'),Pro('elle')),V('manger')), "Moi, toi et elle mangeons.", 'pronoms coordonnés par "et" sujets du verbe' );
    assert.equal( S(CP(C('ou'),Pro('tu'),Pro('je')),VP(V('aller'),Pro('y'))), "Toi ou moi y va.", 'juste "toi" et "moi"' );
    assert.equal( NP(D('le'), CP(C('-'), N('vaisseau'), N('mère'))).n('p'), "les vaisseaux-mères", 'noms coordonnés par trait d\'union' );
    assert.equal( NP(D('un'),A('beau'),J(N('bleu'), N('ciel'))), "un beau bleu ciel", 'noms joints par espace' );
    assert.equal( NP(D('un'), N('mur'),CP(A('rouge'),C('-'),A('orange'))), "un mur rouge-orange", 'adjectifs coordonnés par trait d\'union' );
    assert.equal( CP(C('et/ou'),N('glucose'),N('fructose'), N('sucrose')), "glucose, fructose et/ou sucrose", 'mots coordonnées par "et/ou"' );
    assert.equal( S(Pro('il'), VP(V('pleuvoir'),CP(NP(D('un'), N('chat')),C('et'), NP(D('un'),N('chien'))).n('p'))), "Il pleut des chats et des chiens.", 'syntagme coordonné comme complément' );
    assert.equal( NP(N('grammaire'),J(A('gros'),A('gras'),A('grand')).pos('pre')), "grosse grasse grande grammaire", 'positionnement forcé d\'adjectifs à travers jonction' );
    assert.equal( S(J(N('verdict'), N('OK'), C(':'))), "Verdict: OK.", 'jonction par deux-points, phrase incomplète' );
    assert.equal( S(Adv('demain').pos('end'),Pro('je'),VP(V('continuer').f('f'),NP(D('ce'),N('projet')))), "Je continuerai ce projet demain.", '"demain" comme complément de phrase' );
    assert.equal( S(Adv('demain').pos('beg'), Pro('je'), VP(V('continuer').f('f'),NP(D('ce'), N('projet')))), "Demain, je continuerai ce projet.", 'complément de phrase au début' );
    assert.equal( S(Pro('je'), VP(V('aimer'),NP(D('mon'), N('auto')))), "J'aime mon auto.", 'élision de "je", liaison de "ma"' );
    assert.equal( S(Pro('ce'),VP(V('être'), NP(D('ce'), N('ordinateur')))), "C'est cet ordinateur.", 'élision et liaison de "ce" selon qu\'il est pronom ou déterminant' );
    assert.equal( S(NP(D('le'), N('homme')), VP(V('descendre'), PP(P('de'), NP(D('le'), N('arbre'))))), "L'homme descend de l'arbre.", 'élision de "le", donc "de le" pas contracté' );
    assert.equal( PP(P('à'), NP(D('le'), N(5556426).num('t'))), "au 555-6426", 'numéro de téléphone à 7 chiffres dans syntagme' );
    assert.equal( N(5145556426).num('t'), "514-555-6426", 'numéro de téléphone à 10 chiffres' );
    assert.equal( N(18005556426).num('t'), "1-800-555-6426", 'numéro de téléphone à 11 chiffres' );
    assert.equal( S(VP(V('donner'), NP(D('le'),  N('récompense')), PP(P('à'), Pro('je')))).t('exc').f('ip').pe(2), "Donne-moi la récompense!", 'impératif avec pronom comme complément indirect' );
    assert.equal( S(VP(V('donner'), Pro('elle'), PP(P('à'), Pro('je')))).t('exc').f('ip').pe(2), "Donne-la-moi!", 'impératif avec pronoms comme compléments' );
    assert.equal( S(VP(V('donner'), NP(D('le'), N('récompense')).pro(1), PP(P('à'), Pro('je')))).t('exc').f('ip').pe(2), "Donne-la-moi!", 'conversion de syntagme nominal en pronom approprié' );
    assert.equal( S(Pro('il'), VP(V('être').f('i'), NP(D('un'), N('fois'))) ).a('...'), "Il était une fois...", 'imparfait à partir du radical, points de suspension' );
    assert.equal( S(NP(N('hyperbole')).d('d'), VP(V('être'),NP(N('figure'), PP(P('de'), N('style')) ).d('i'))), "L'hyperbole est une figure de style.", 'articles défini et indéfini par méthode, ajout à un syntagme' );
    assert.equal( S(NP(N('orange')).d('d'),VP(V('être'), NP(N('couleur')).d('i'))), "L'orange est une couleur.", 'sujet féminin, attribut féminin invariable' );
    assert.equal( S(NP(N('orange')).d('d'), VP(V('être'),NP(N('fruit')).d('i'))), "L'orange est un fruit.", 'sujet féminin, attribut masculin invariable' );
    assert.equal( S(NP(N('orange')).d('d'), VP(V('être'), NP(N('allié')).d('i'))), "L'orange est une alliée.", 'sujet féminin, attribut masculin variable' );
    assert.equal( S(NP(N('suspect')).d('d'),VP(V('être'), NP(N('femme')).d('i'))), "Le suspect est un homme.", 'accord de l\'attribut indésirable' );
    assert.equal( S(NP(N('suspect')).d('d'), VP(V('être').imp(1),NP(N('femme') ).d('i'))), "Le suspect est une femme.", 'verbe impersonnel forcé, pas d\'accord de l\'attribut' );
    assert.equal( S(Pro('il'), VP(V('être').f('i').imp(1),NP(N('fois')).d('i'),NP(N('fille'),A('petit')).d('i')) ).a('...'), "Il était une fois une petite fille...", 'verbe avec attributs multiples' );
    assert.equal( S(N('voiture').d('dem'),VP(V('dépasser'), N('autre').d('d'))), "Cette voiture dépasse l'autre.", 'raccourci pour syntagme nominal simple' );
    assert.equal( S(Pro('je'), VP(V('détester'), VP(V('être'), A('coupé')))), "Je déteste être coupé.", 'syntagme verbal comme complément de verbe' );
    assert.equal( S(Pro('je'),VP(V('détester'),SP(C('quand'),S(Pro('on'), VP(V('couper'), Pro('moi')))))), "Je déteste quand on me coupe.", 'subordonnée comme complément de verbe' );
    assert.equal( S(Pro('il'),VP(V('avoir'), Pro('en'),Adv('trop'),Pro('y'))).t('exc'), "Il y en a trop!", 'pronoms "y" et "en" comme compléments de verbe' );
    assert.equal( AP(Adv('très'),A('fier')), "très fier", 'syntagme adjectival' );
    assert.equal( S(Pro('elle'),VP(V('être'),AP(Adv('vraiment'),Adv('très'),A('fier'),PP(P('de'),NP(D('son'),N('travail')))))), "Elle est vraiment très fière de son travail.", 'syntagme adjectival complexe' );
    assert.equal( S(N('voiture').d('dem'), VP(V('être'),AP(Adv('plus'),A('rapide'),SP(Pro('que'), N('autre').d('d'))))), "Cette voiture est plus rapide que l'autre.", 'syntagme adjectival avec subordonnée' );
    assert.equal( NP(N('chaperon'),AP(A('joli'),Adv('très')),A('rouge')).d('i'), "un très joli chaperon rouge", 'syntagme adjectival antéposé comme son adjectif' );
    assert.equal( CP(C('et'),N('A'), N('B'),N('C').a(','), N('D')), "A, B, C, et D", 'ponctuation arbitraire après un mot' );
    assert.equal( CP(NP(A('beau').g('f').cap(1).fct('head')).d('d'), NP().d('d').addHead(A('bête').cap(1)).g('f')).add(C('et')).cap(1), "La Belle et la Bête", 'adjectifs comme noms par trait "fct" et méthode "addHead"' );
    assert.equal( CP(N('A'),N('B'), N('C')).c('ou'), "A, B ou C", 'alternative pour coordonnant' );
    assert.equal( S(Pro('moi'),VP(V('aller'), Pro('y'))), "J'y vais.", 'pronom sujet modifié' );
    assert.equal( S(CP(Pro('tu'),Pro('je')).c('et'),VP(V('aller'),Pro('y'))), "Toi et moi y allons.", 'pronoms sujets coordonnées modifiés' );
    assert.equal( V('avoir').add( N('faim')), "avoir faim", 'passage de mot à syntagme' );
    assert.equal( S(Adv('demain').fct('subj'),VP(V('être'),NP(N('jour'),D('un'),A('autre')))), "Demain est un autre jour.", 'adverbe comme sujet' );
    assert.equal( VP(V('avoir'),NP(Adv('très'), N('peur'))), "avoir très peur", 'adverbe dans groupe nom' );
    assert.equal( A('entouré').en('*'), "*entouré*", 'entourer un mot' );
    assert.equal( J(A('surchargé'), A('overloaded').en('(')), "surchargé (overloaded)", 'parenthèses' );
    assert.equal( CP(S(Pro('je'),VP(V('aller'),Pro('y'))),S(Pro('je'),VP(V('exécuter'),N('ordre').n('p').d('d'))),S(Pro('je'), V('revenir'))).c('et'), "J'y vais, j'exécute les ordres et je reviens.", 'coordination de propositions' );
    assert.equal( V('blanchir').g('f').f('pp'), "blanchie", 'participe passé accordé' );
    assert.equal( CP(S(Pro('je'),V('comprendre').f('pc')),S(Pro('je'),V('entendre').f('pq')),S(Pro('je'), V('devoir').f('cp'))).c(';'), "J'ai compris; j'avais entendu; j'aurais dû.", 'passé composé, plus-que-parfait, conditionnel passé' );
    assert.equal( CP(C('et'),N('A'),N('B').a('*'), N('C'),N('D')), "A, B*, C et D", 'caractère et virgule après un élément d\'une coordination' );
    assert.equal( S(Pro('je'),V('accepter'),A('soussigné').pos('mid')), "Je, soussigné, accepte.", 'complément de phrase au milieu' );
    assert.equal( S(Pro('il'),VP(V('falloir'),VP(V('savoir'),VP(V('laisser'),V('aller'))))), "Il faut savoir laisser aller.", 'verbe complément de verbe complément de verbe complément de verbe' );
    assert.equal( S(NP(D('ton'),N('moto')),VP(V('être'),A('remisé')),PP(P('pour'),N('hiver').d('d')).pos('end')).f('pc'), "Ta moto a été remisée pour l'hiver.", 'attribut après passé composé' );
    assert.equal( A('dernier').g('f').d('d'), "la dernière", 'raccourci pour syntagme nominal à partir d\'adjectif' );
    assert.equal( NP(Pro('ce'),SP(Pro('dont'),S(Pro('tu'), V('parler')))), "ce dont tu parles", 'pronom noyau de syntagme nominal' );
    assert.equal( S(N('NON')).a(''), "NON", 'trait avec valeur fausse' );
    assert.equal( SP(C('que'),CP(S(Pro('il'), V('pleuvoir').f('s')),Adv('non')).c('ou')), "qu'il pleuve ou non", 'phrase coordonnée subordonnée' );
    assert.equal( NP(N('bout').d('d'),A('autre')), "l'autre bout", 'NP dans NP par erreur' );
    assert.equal( S(Pro('tu'), V('vouloir')).sub('où'), "où tu veux", 'raccourci pour subordonnée' );
    assert.equal( AP(Adv('plus'),A('rapide'),A('autre').d('d').sub('que').n('p')), "plus rapide que les autres", 'n\'importe quoi peut être subordonné' );
    assert.equal( J('Ceci est une phrase brute à afficher sans réalisation.'), "Ceci est une phrase brute à afficher sans réalisation.", 'Sans réalisation' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
//    assert.equal( , "", '' );
});